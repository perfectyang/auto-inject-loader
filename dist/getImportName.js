"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,e){if(r){if("string"==typeof r)return _arrayLikeToArray(r,e);var a=Object.prototype.toString.call(r).slice(8,-1);return"Object"===a&&r.constructor&&(a=r.constructor.name),"Map"===a||"Set"===a?Array.from(a):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(r,e):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(r))return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,e){(null==e||e>r.length)&&(e=r.length);for(var a=0,t=new Array(e);a<e;a++)t[a]=r[a];return t}var fs=require("fs"),path=require("path"),t=require("@babel/types"),parser=require("@babel/parser"),traverse=require("@babel/traverse").default;function readText(r){return fs.readFileSync(path.join(r.basePath||"",r.paths),"utf8")}function getImportName(r){var a,e=readText(r),n=parser.parse(e,{sourceType:"module",plugins:["dynamicImport"]}),o=new Set;traverse(n,{ExportNamedDeclaration:function(r){var e=r.node.declaration;e&&t.isVariableDeclaration(e)?o.add(e.declarations[0].id.name):e&&t.isFunctionDeclaration(e)&&o.add(e.id.name)},ExportDefaultDeclaration:function(r){var e=r.node.declaration;e&&(t.isIdentifier(e)?a=e.name:t.isFunctionDeclaration(e)&&(a=e.id.name))}});var i=_toConsumableArray(o).map(function(r){return{key:"normal",name:r}});return i.unshift({key:"default",name:a}),i}module.exports=getImportName;