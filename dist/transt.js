"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,e){if(r){if("string"==typeof r)return _arrayLikeToArray(r,e);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(t):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,e):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(r))return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,a=new Array(e);t<e;t++)a[t]=r[t];return a}var t=require("@babel/types"),parser=require("@babel/parser"),generate=require("@babel/generator").default,traverse=require("@babel/traverse").default;function generateDeclaration(r){return t.importDeclaration([t.importDefaultSpecifier(t.identifier(r.name))],t.stringLiteral(r.paths))}function transtJs(r,e){var t=e.autoImport,a=parser.parse(r,{sourceType:"module",plugins:["dynamicImport"]}),n=[],o=t.map(function(r){return r.name}),i={};if(traverse(a,{Identifier:function(r){var e=r.node.name;!o.includes(e)||e in i||(n.push(e),i[e]=e)}}),n.length){var u,l=t.filter(function(r){return n.includes(r.name)}).map(function(r){return generateDeclaration(r)});(u=a.program.body).unshift.apply(u,_toConsumableArray(l))}return generate(a).code}module.exports=transtJs;